@charset "UTF-8";
@keyframes fadeOut {
  0% {
    opacity: 1;
  }
  95% {
    opacity: 0;
  }
  100% {
    z-index: -5;
    display: none;
    opacity: 0;
  }
}
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}
@keyframes slideInUp {
  from {
    transform: translate3d(0, 30px, 0);
    opacity: 0;
  }
  to {
    transform: translate3d(0, 0, 0);
    opacity: 1;
  }
}
@keyframes slideOutDown {
  from {
    transform: translate3d(0, 0, 0);
  }
  to {
    transform: translate3d(0, 30px, 0);
  }
}
@keyframes navSlideUp {
  from {
    transform: translate3d(0, 0, 0);
  }
  to {
    transform: translate3d(0, -200px, 0);
  }
}
@keyframes navSlideDown {
  from {
    transform: translate3d(0, -200px, 0);
  }
  to {
    transform: translate3d(0, 0, 0);
  }
}
@keyframes ripple {
  from {
    opacity: 1;
    transform: scale3d(0.75, 0.75, 1);
  }
  to {
    opacity: 0;
    transform: scale3d(1.5, 1.5, 1);
  }
}
@keyframes slideIn {
  0% {
    bottom: -50%;
    opacity: 0;
  }
  50% {
    bottom: -50%;
    opacity: 0;
  }
  to {
    opacity: 1;
    bottom: 5%;
  }
}
@keyframes slideOut {
  0% {
    bottom: 5%;
    opacity: 1;
  }
  50% {
    bottom: -50%;
    opacity: 0.5;
  }
  100% {
    bottom: -50%;
    opacity: 0;
  }
}
.sec-title.marked {
  position: relative;
}
.sec-title.marked::after {
  position: absolute;
  right: 50%;
  transform: translateX(50%);
  width: 70px;
  height: 6px;
  border-radius: 10px;
  background-color: #484848;
  content: "";
}
.sec-title.marked.side::after {
  right: 0;
  transform: none;
}

@keyframes ripple {
  from {
    opacity: 1;
    transform: scale3d(0.75, 0.75, 1);
  }
  to {
    opacity: 0;
    transform: scale3d(1.5, 1.5, 1);
  }
}
@keyframes slideIn {
  0% {
    bottom: -50%;
    opacity: 0;
  }
  50% {
    bottom: -50%;
    opacity: 0;
  }
  to {
    opacity: 1;
    bottom: 5%;
  }
}
@keyframes slideOut {
  0% {
    bottom: 5%;
    opacity: 1;
  }
  50% {
    bottom: -50%;
    opacity: 0.5;
  }
  100% {
    bottom: -50%;
    opacity: 0;
  }
}
.navbar .has-megamenu {
  position: static !important;
}
.navbar .has-megamenu .active {
  background-color: white !important;
}

.navbar .has-megamenu .dropdown-menu {
  left: 0;
  right: 0;
  width: 100%;
  padding: 20px;
  flex-flow: row wrap;
}
.navbar .has-megamenu .dropdown-menu .dropdown-menu {
  position: static !important;
  display: flex !important;
  flex-flow: column;
}
.navbar .has-megamenu .dropdown-menu .megamenu {
  width: fit-content;
  display: inline-flex;
  flex-flow: column;
  margin-left: 30px;
}
.navbar .has-megamenu .dropdown-menu .megamenu > .dropdown-item {
  font-weight: 600;
}
.navbar .has-megamenu .dropdown-menu .megamenu .dropdown-menu {
  box-shadow: none;
  border: none;
  background-color: transparent;
  padding: 0;
  margin-top: 5px;
}
.navbar .has-megamenu .dropdown-menu .megamenu .dropdown-menu .nav-item {
  padding: 0;
}

.dropdown-toggle {
  cursor: pointer;
}

.dropdown-menu {
  position: absolute;
  right: 50%;
  transform: translateX(50%);
  background-color: white;
  position: absolute;
  min-width: 260px;
  z-index: 1;
  list-style: none;
  padding: 0;
  color: #4e4e4e;
  display: none;
  border-radius: 5px;
  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.08);
}
.dropdown-menu::after {
  width: 0;
  height: 0;
  border-left: 5px solid transparent;
  border-right: 5px solid transparent;
  border-bottom: 5px solid white;
  content: "";
  position: absolute;
  right: 50%;
  transform: translateX(50%);
  top: -5px;
}
.dropdown-menu .dropdown::after {
  top: 10px;
  content: "+";
}
.dropdown-menu .menu-item {
  margin: 0 !important;
  display: flex;
  padding: 10px;
  justify-content: flex-start;
  align-items: center;
}
.dropdown-menu .menu-item img {
  max-height: 50px;
  max-width: 30px;
  margin-left: 10px;
  margin-right: 15px;
}
.dropdown-menu .menu-item:first-of-type {
  border-top-left-radius: 5px;
  border-top-right-radius: 5px;
}
.dropdown-menu .menu-item:last-of-type {
  border-bottom-left-radius: 5px;
  border-bottom-right-radius: 5px;
}
.dropdown-menu .menu-item:hover, .dropdown-menu .menu-item:focus, .dropdown-menu .menu-item:active {
  background-color: #f1f1f1;
}
.dropdown-menu .dropdown-menu {
  right: 160px;
  top: 0;
  box-shadow: none;
}
.dropdown-menu .dropdown-menu::after {
  top: 0;
  z-index: -1;
}
.dropdown-menu a {
  padding: 12px 16px;
  text-decoration: none;
  display: block;
}

.dropdown {
  position: relative;
  display: inline-block;
  padding-left: 15px;
}
.dropdown::after {
  position: absolute;
  top: 10px;
  left: 5px;
  content: "+";
  color: #484848;
}
.dropdown .menu-item-has-children {
  width: 100%;
}
.dropdown:hover > .dropdown-menu, .dropdown:focus > .dropdown-menu, .dropdown:active > .dropdown-menu {
  display: block;
  animation-name: slideDown;
  animation-duration: 0.5s;
  animation-fill-mode: forwards;
}
.dropdown:hover::after, .dropdown:focus::after, .dropdown:active::after {
  content: "-";
}

@keyframes slideDown {
  0% {
    display: block;
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}
@keyframes splide-loading {
  0% {
    transform: rotate(0);
  }
  to {
    transform: rotate(1turn);
  }
}
.splide__container {
  position: relative;
  box-sizing: border-box;
}

.splide__list {
  margin: 0 !important;
  padding: 0 !important;
  width: -webkit-max-content;
  width: max-content;
  will-change: transform;
}

.splide.is-active .splide__list {
  display: flex;
}

.splide__pagination {
  display: inline-flex;
  align-items: center;
  width: 95%;
  flex-wrap: wrap;
  justify-content: center;
  margin: 0;
}

.splide__pagination li {
  list-style-type: none;
  display: inline-block;
  line-height: 1;
  margin: 0;
}

.splide {
  visibility: hidden;
}

.splide,
.splide__slide {
  position: relative;
  outline: none;
}

.splide__slide {
  box-sizing: border-box;
  list-style-type: none !important;
  margin: 0;
  flex-shrink: 0;
}

.splide__slide img {
  vertical-align: bottom;
}

.splide__slider {
  position: relative;
}

.splide__spinner {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  margin: auto;
  display: inline-block;
  width: 20px;
  height: 20px;
  border-radius: 50%;
  border: 2px solid #999;
  border-left-color: transparent;
  animation: splide-loading 1s linear infinite;
}

.splide__track {
  position: relative;
  z-index: 0;
  overflow: hidden;
}

.splide--draggable > .splide__track > .splide__list > .splide__slide {
  -webkit-user-select: none;
  user-select: none;
}

.splide--fade > .splide__track > .splide__list {
  display: block;
}

.splide--fade > .splide__track > .splide__list > .splide__slide {
  position: absolute;
  top: 0;
  left: 0;
  z-index: 0;
  opacity: 0;
}

.splide--fade > .splide__track > .splide__list > .splide__slide.is-active {
  position: relative;
  z-index: 1;
  opacity: 1;
}

.splide--rtl {
  direction: rtl;
}

.splide--ttb > .splide__track > .splide__list {
  display: block;
}

.splide--ttb > .splide__pagination {
  width: auto;
}

@keyframes ripple {
  from {
    opacity: 1;
    transform: scale3d(0.75, 0.75, 1);
  }
  to {
    opacity: 0;
    transform: scale3d(1.5, 1.5, 1);
  }
}
@keyframes slideIn {
  0% {
    bottom: -50%;
    opacity: 0;
  }
  50% {
    bottom: -50%;
    opacity: 0;
  }
  to {
    opacity: 1;
    bottom: 5%;
  }
}
@keyframes slideOut {
  0% {
    bottom: 5%;
    opacity: 1;
  }
  50% {
    bottom: -50%;
    opacity: 0.5;
  }
  100% {
    bottom: -50%;
    opacity: 0;
  }
}
.sidenav {
  height: 100%;
  width: 0;
  position: fixed;
  z-index: 5;
  top: 0;
  right: 0;
  background-color: #3c4b54;
  overflow-x: hidden;
  transition: 0.5s;
}
.sidenav .sidebar-header {
  background-color: #f1612c;
  position: relative;
  padding: 15px 40px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}
.sidenav .sidebar-header .title {
  color: white;
  white-space: nowrap;
  margin: 0;
  font-size: 1.6rem;
}
.sidenav .sidebar-header .closebtn {
  font-size: 36px;
  color: white;
}
.sidenav .sidebar-header .closebtn:hover, .sidenav .sidebar-header .closebtn:focus, .sidenav .sidebar-header .closebtn:active {
  text-decoration: none;
}
.sidenav ul {
  padding-right: 0;
  list-style: none;
}
.sidenav ul li {
  overflow: hidden;
  padding: 0;
  position: relative;
}
.sidenav ul li.menu-icon {
  display: grid;
  grid-template-columns: 70px auto;
  grid-auto-flow: column dense;
}
.sidenav ul li.menu-icon img {
  max-width: 30px;
  max-height: 30px;
  align-self: center;
  justify-self: flex-start;
  margin-right: 40px;
}
.sidenav ul li.menu-icon a {
  padding-right: 10px;
  align-self: center;
  justify-self: flex-start;
}
.sidenav ul li.menu-item-has-children::after {
  position: absolute;
  top: 10px;
  color: white;
  font-size: 1.7rem;
  content: "+";
  left: 40px;
}
.sidenav ul li.menu-item-has-children.child-menu-opened::after {
  content: "-";
}
.sidenav ul li a {
  display: inline-block;
  white-space: nowrap;
  color: white;
  font-weight: 500;
  padding-top: 15px;
  padding-bottom: 15px;
  padding-right: 40px;
}
.sidenav ul.sub-menu {
  transition: all 0.5s;
  overflow: hidden;
  max-height: 0;
  background-color: #37454e;
  position: relative;
}
.sidenav ul.sub-menu.opened::after {
  position: absolute;
  width: 5px;
  height: 100%;
  content: "";
  background-color: white;
  right: 0;
  top: 0;
}

html,
body {
  direction: rtl;
}
html *,
html *::before,
html *::after,
body *,
body *::before,
body *::after {
  box-sizing: border-box;
}

body.out {
  animation-duration: 0.5s;
  animation-fill-mode: both;
  animation-name: slideOutDown;
}

a {
  text-decoration: none;
  color: inherit;
}
a:focus {
  outline: none;
}

section {
  padding: 50px 0;
  background-color: #ffffff;
  position: relative;
  box-sizing: border-box;
}

.container-fluid,
.container {
  padding: 0 6vw;
}

.container-fluid:not(.no-max) {
  max-width: 1600px;
}

.spacer {
  flex: 1 1 auto;
}

.vail {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: black;
  opacity: 0.4;
}

.shadow-vail {
  box-shadow: 0px 0px 1px 100vmax rgba(0, 0, 0, 0.8) !important;
}

.bg-image {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  object-fit: cover;
  height: 100%;
  width: 100%;
}

.bg-container {
  position: relative;
  overflow: hidden;
}

.bold {
  font-weight: bold;
  letter-spacing: 1px;
}

.white {
  color: white;
}

.img-container {
  position: relative;
}

.clickable-image {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: transparent;
  z-index: 10;
}

.sidebar__inner {
  position: sticky;
  top: 90px;
}

.slick-slide:focus {
  outline: none;
}

div.pagination {
  margin: 30px 0;
}
div.pagination .page-numbers {
  font-size: 1rem;
  padding: 0.5rem 1rem;
  transition: all 0.3s;
}
div.pagination .page-numbers.current {
  color: white;
  background-color: #f1612c;
  border-radius: 100px;
}
div.pagination .page-numbers.next {
  border: 2px solid lightgray;
  border-radius: 20px;
}
div.pagination .page-numbers.next i {
  margin-right: 10px;
  font-size: 0.9rem;
}
div.pagination .page-numbers.next i::before {
  content: "";
}
div.pagination .page-numbers.prev {
  border: 2px solid lightgray;
  border-radius: 20px;
}
div.pagination .page-numbers.prev i {
  margin-left: 10px;
  font-size: 0.9rem;
}
div.pagination .page-numbers.prev i::before {
  content: "";
}
div.pagination .page-numbers:hover {
  text-decoration: none;
  border-color: #f1612c;
}

.slick-prev,
.slick-next {
  z-index: 10;
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
